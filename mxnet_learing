import numpy as np
import gzip
import struct
import mxnet as mx

def read_data(label_url,image_url):
    with gzip.open(label_url) as flbl:
        magic, num = struct.unpack(">II",flbl.read(8))
        label = np.fromstring(flbl.read(),dtype = np.int8)
    with gzip.open(image_url) as fimg:
        magic, num, rows, cols = struct.unpack(">IIII",fimg.read(16))
        image = np.fromstring(fimg.read(),dtype = np.uint8).reshape(len(label), rows, cols)
    return (label,image)
(train_lbl, train_img) = read_data('mxnet/example/image-classification/data/train-labels-idx1-ubyte.gz','mxnet/example/image-classification/data/train-images-idx3-ubyte.gz')
(val_lbl, val_img) = read_data('mxnet/example/image-classification/data/t10k-labels-idx1-ubyte.gz','mxnet/example/image-classification/data/t10k-images-idx3-ubyte.gz')

def to4d(img):
    return img.reshape(img.shape[0],1,28,28).astype(np.float32)/255

batch_size=100
train_iter=mx.io.NDArrayIter(to4d(train_img),train_lbl,batch_size,shuffle=True)
val_iter=mx.io.NDArrayIter(to4d(val_img),val_lbl,batch_size)

data = mx.sym.Variable('data')
conv1 = mx.sym.Convolution(data=data,kernel=(5,5),num_filter=20)
tanh1=mx.sym.Activation(data=conv1,act_type="tanh")
pool1=mx.sym.Pooling(data=tanh1,pool_type="max",kernel=(2,2),stride=(2,2))
conv2=mx.sym.Convolution(data=pool1,kernel=(5,5),num_filter=50)
tanh2=mx.sym.Activation(data=conv2,act_type="tanh")
pool2=mx.sym.Pooling(data=tanh2,pool_type="max",kernel=(2,2),stride=(2,2))
flatten=mx.sym.Flatten(data=pool2)
fc1=mx.symbol.FullyConnected(data=flatten,num_hidden=500)
tanh3=mx.sym.Activation(data=fc1,act_type="tanh")
fc2=mx.sym.FullyConnected(data=tanh3,num_hidden=10)
lenet=mx.sym.SoftmaxOutput(data=fc2,name='softmax')
model=mx.model.FeedForward(
    symbol=lenet,
    num_epoch=10,
    learning_rate=0.1
)
model.fit(
    X=train_iter,
    eval_data=val_iter,
    batch_end_callback=mx.callback.Speedometer(batch_size,200)
)
